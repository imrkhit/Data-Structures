#include <stdio.h>
#include <stdlib.h>
#include<math.h>
#include<stdbool.h>
struct node
{
    int data;
    struct node* left;
    struct node* right;
};
struct node* root=NULL;
struct node* create(int item)
{
    struct node* temp=(struct node*)malloc(sizeof(struct node*));
    temp->data=item;
    temp->left=NULL;
    temp->right=NULL;
    return temp;
};
struct node* insert(struct node* node,int key)
{
    if(node==NULL)
    {
        node=create(key);
        return node;
    }
    else if(key<node->data)
        node->left=insert(node->left,key);
    else if(key>node->data)
        node->right=insert(node->right,key);
    return node;
};
int search(struct node* root,int key)
{
    if(root==NULL)
        return -1;

    if(root->data==key)
        return 1 ;
    if(root->data>key)
        return search(root->left,key);
    return search(root->right,key);
}
int findmin(struct node* root)
{
    if(root==NULL)
    {
        printf("tree is empty\n");
        return -1;
    }
    while(root->left!=NULL)
    {
        root=root->left;
    }
    return root->data;
}
int findmax(struct node* root)
{
    if(root==NULL)
    {
        printf("tree is empty\n");
        return -1;
    }
    while(root->right!=NULL)
    {
        root=root->right;
    }
    return root->data;
}

void preorder(struct node* root)
{
    if(root==NULL)
        return;
    printf("%d\t",root->data);
    preorder(root->left);
    preorder(root->right);
}
void inorder(struct node* root)
{
    if(root==NULL)
        return;
    inorder(root->left);
    printf("%d\t",root->data);
    inorder(root->right);
}
void postorder(struct node* root)
{
    if(root==NULL)
        return;
    postorder(root->left);
    postorder(root->right);
    printf("%d\t",root->data);
}
int findHeight(struct node* root)
{
    if(root==NULL)
        return -1;
    return max(findHeight(root->left),findHeight(root->right))+1;
}
int max(int x,int y)
{
    if(x>y)
        return x;
    return y;
}
bool IsLesser(struct node* root,int value)
{
    if(root==NULL)
        return false;
    if((root->data<=value)&&IsLesser(root->left,value)&IsLesser(root->right,value))
       return true;
    else
        return false;
}
bool IsGreater(struct node* root,int value)
{
    if(root==NULL)
        return false;
    if((root->data>value)&&IsGreater(root->left,value)&IsGreater(root->right,value))
       return true;
    else
        return false;
}
bool IsBinaryTree(struct node* root)
{
    if(root==NULL)
        return false;
    if(IsLesser(root->left,root->data)&&IsGreater(root->right,root->data)&&IsBinaryTree(root->left)&&IsBinaryTree(root->right))
        return true;
    else
        return false;
}
int main()
{
    int n,i,srch,key,pos,ch,min,max,height,p;

    while(1)
    {
    printf("\n1. create\n2. search\n3. find min\n4. find max\n5. find height of the tree\n6. preorder\n7. inorder\n8. postorder\n9.check for binary tree\n10. exit\n");
    scanf("%d",&ch);
    switch(ch)
    {
        case 1:printf("enter the number of nodes to be inserted\n");
                scanf("%d",&n);
                printf("enter the elements\n");
                for(i=0;i<n;i++)
                {
                    scanf("%d",&key);
                    root=insert(root,key);
                }
                break;
        case 2: printf("enter the element to be searched\n");
                scanf("%d",&srch);
                pos=search(root,srch);
                if(pos==-1)
                    printf("key not found\n");
                else
                    printf("key found\n");
                break;
        case 3: min=findmin(root);
                printf("minimum=%d",min);
                break;
        case 4: max=findmax(root);
                printf("maximum=%d",max);
                break;
        case 5: height=findHeight(root);
                printf("height=%d\n",height);
                break;
        case 6: preorder(root);
                break;
        case 7: inorder(root);
                break;
        case 8: postorder(root);
                break;
        case 9: IsBinaryTree(root);
                break;
        case 10: exit(0);
    }
    }
}
//some errors are in implementing boolean function
