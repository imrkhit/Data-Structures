#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node* next;
};
struct node* head=NULL;
struct node* insert(struct node* head,int x)
{
    struct node* temp=(struct node*)malloc(sizeof(struct node*));
    temp->data=x;
    temp->next=NULL;
    if(head==NULL)
        head=temp;
    else
    {
        struct node* temp1=head;
        while(temp1->next!=NULL)
        {
            temp1=temp1->next;
        }
        temp1->next=temp;
    }
    return head;
}
struct node* reverse(struct node* head)
{
    struct node* next,* current,* prev;
    current=head;
    prev=NULL;
    while(current!=NULL)
    {
        next=current->next;
        current->next=prev;
        prev=current;
        current=next;
    }
    head=prev;
    return head;
}
void ForwardPrint(struct node* head)
{
    if(head==NULL)
    {
        printf("\n");
        return;
    }
    printf("%d\t",head->data);
    ForwardPrint(head->next);
}
void ReversePrint(struct node* head)
{
    if(head==NULL)
    {
        printf("\n");
        return;
    }
    ReversePrint(head->next);
    printf("%d\t",head->data);
}


int main()
{
    int i=0,ch,n,ele;
    while(1)
    {
        printf("\n1. Insert element into the list\n2. Reverse the list\n3. Print the elements in forward direction\n4. Print the elements in reverse direction\n5. Exit\nEnter your choice:");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: printf("enter the element to be inserted\n");
                    scanf("%d",&n);
                    printf("enter the elements\n");
                    while(i<n)
                    {
                        scanf("%d\n",&ele);
                        head=insert(head,ele);
                        i++;
                    }
                    break;
            case 2: head=reverse(head);
                    break;
            case 3: ForwardPrint(head);
                    break;
            case 4: ReversePrint(head);
                    break;
            case 5: exit(0);

        }
    }

}
